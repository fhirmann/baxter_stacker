#!/usr/bin/env python

import rospy

from perception.srv import GetScene, GetSceneResponse
from perception.msg import Block

import tf
from math import pi

from tf.transformations import *

def get_defined_block1_from_test_scene():
    block = Block()
    block.id = 1
    block.type = block.CUBOID
    block.color = block.YELLOW

    block.width = 40./1000.
    block.depth = 40./1000.
    block.height = 80./1000.

    block.pose.header.frame_id = '/table'

    block.pose.pose.position.x = 0.24
    block.pose.pose.position.y = 0.50
    block.pose.pose.position.z = block.height/2.

    q_rot = quaternion_from_euler(0, 0, 45./180.*pi)   

    block.pose.pose.orientation.x = q_rot[0]
    block.pose.pose.orientation.y = q_rot[1]
    block.pose.pose.orientation.z = q_rot[2]
    block.pose.pose.orientation.w = q_rot[3]

    return block

def get_defined_block2_from_test_scene():
    block = Block()
    block.id = 2
    block.type = block.CUBOID
    block.color = block.RED

    block.width = 40./1000.
    block.depth = 40./1000.
    block.height = 80./1000.

    block.pose.header.frame_id = '/table'

    block.pose.pose.position.x = 0.24
    block.pose.pose.position.y = 0.70
    block.pose.pose.position.z = block.height/2.

    q_rot = quaternion_from_euler(0, 0, -45./180.*pi)   

    block.pose.pose.orientation.x = q_rot[0]
    block.pose.pose.orientation.y = q_rot[1]
    block.pose.pose.orientation.z = q_rot[2]
    block.pose.pose.orientation.w = q_rot[3]

    return block

def get_block_stacked_on_block1_from_test_scene():
    block = Block()
    block.id = 3
    block.type = block.CUBOID
    block.color = block.BLUE

    block.width = 40./1000.
    block.depth = 40./1000.
    block.height = 80./1000.

    block.pose.header.frame_id = '/table'

    block1 = get_defined_block1_from_test_scene()

    block.pose.pose.position.x = block1.pose.pose.position.x
    block.pose.pose.position.y = block1.pose.pose.position.y
    block.pose.pose.position.z = block1.pose.pose.position.z + block1.height/2 + block.height/2 # position from block1 + half height of block 1 + half height of new block

    # no orientation (=0)


    return block

def get_block_stacked_on_block3_from_test_scene():
    block = Block()
    block.id = 4
    block.type = block.CUBOID
    block.color = block.GREEN

    block.width = 20./1000.
    block.depth = 40./1000.
    block.height = 80./1000.

    block.pose.header.frame_id = '/table'

    block3 = get_block_stacked_on_block1_from_test_scene()

    block.pose.pose.position.x = block3.pose.pose.position.x
    block.pose.pose.position.y = block3.pose.pose.position.y
    block.pose.pose.position.z = block3.pose.pose.position.z + block3.height/2 + block.height/2 # position from block3 + half height of block 3 + half height of new block

    # no orientation (=0)


    return block

    

def get_block_stacked_on_block2_from_test_scene():
    block = Block()
    block.id = 3
    block.type = block.CUBOID
    block.color = block.BLUE

    block.width = 40./1000.
    block.depth = 40./1000.
    block.height = 80./1000.

    block.pose.header.frame_id = '/table'

    block2 = get_defined_block2_from_test_scene()

    block.pose.pose.position.x = block2.pose.pose.position.x
    block.pose.pose.position.y = block2.pose.pose.position.y
    block.pose.pose.position.z = block2.pose.pose.position.z + block2.height/2 + block.height/2 # position from block2 + half height of block 3 + half height of new block

    # no orientation (=0)


    return block

def block_list_simple_scene():
    # large yellow_block is on loc1
    # red block is on loc2
    return [get_defined_block1_from_test_scene(), get_defined_block2_from_test_scene()]


def block_list_stacked_scene2():
    # large yellow_block is on loc1, large blue block is stacked on large yellow block, small green block is again stacked on large blue block
    # red block is on loc2
    return [get_defined_block1_from_test_scene(), get_defined_block2_from_test_scene()]

def block_list_stacked_scene():
    # large yellow_block is on loc1, large blue block is stacked on large yellow_block
    # small red block is on loc2
    return [get_defined_block1_from_test_scene(), get_defined_block2_from_test_scene(), get_block_stacked_on_block1_from_test_scene()]

def block_list_easy_collision_scene():
    return [get_defined_block1_from_test_scene(), get_defined_block2_from_test_scene(), get_block_stacked_on_block2_from_test_scene()]

def handle_get_scene(req):
    rospy.loginfo("Handling get_scene service...")

    block_list = block_list_simple_scene()
    success = True


    rospy.loginfo("Blocks are: \n{}".format(block_list))

    return GetSceneResponse(success, block_list)

def get_scene_server():
    rospy.init_node('get_scene_server')
    s = rospy.Service('get_scene', GetScene, handle_get_scene)
    print "Ready to provide service get_scene for predefined static test scenes."
    rospy.spin()

if __name__ == "__main__":
    get_scene_server()
